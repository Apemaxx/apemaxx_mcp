// src/components/Header/Header.tsx
import React, { useState, useRef, useEffect } from 'react'
import { useAuth } from '../../contexts/AuthContext'
import { 
  User, 
  Settings, 
  Bell, 
  LogOut, 
  ChevronDown, 
  Building2, 
  Mail, 
  Phone,
  MapPin,
  Briefcase
} from 'lucide-react'

// User Avatar Component
const UserAvatar: React.FC<{
  src?: string | null
  name?: string | null
  size?: 'sm' | 'md' | 'lg'
}> = ({ src, name, size = 'md' }) => {
  const sizeClasses = {
    sm: 'w-6 h-6 text-xs',
    md: 'w-8 h-8 text-sm',
    lg: 'w-12 h-12 text-lg'
  }

  // Get initials from name
  const getInitials = (name: string | null): string => {
    if (!name) return 'U'
    return name
      .split(' ')
      .map(word => word.charAt(0).toUpperCase())
      .slice(0, 2)
      .join('')
  }

  if (src) {
    return (
      <img
        src={src}
        alt={name || 'User'}
        className={`${sizeClasses[size]} rounded-full object-cover border-2 border-white shadow-sm`}
        onError={(e) => {
          // Hide image if it fails to load
          e.currentTarget.style.display = 'none'
        }}
      />
    )
  }

  return (
    <div className={`${sizeClasses[size]} rounded-full bg-blue-600 text-white flex items-center justify-center font-medium border-2 border-white shadow-sm`}>
      {getInitials(name)}
    </div>
  )
}

// User Dropdown Menu Component
const UserDropdown: React.FC = () => {
  const { user, profile, signOut, loading } = useAuth()
  const [isOpen, setIsOpen] = useState(false)
  const dropdownRef = useRef<HTMLDivElement>(null)

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Handle sign out
  const handleSignOut = async () => {
    try {
      await signOut()
      setIsOpen(false)
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }

  // Get display name
  const getDisplayName = (): string => {
    if (profile?.name) return profile.name
    if (user?.user_metadata?.name) return user.user_metadata.name
    if (user?.email) return user.email.split('@')[0]
    return 'User'
  }

  // Get avatar URL
  const getAvatarUrl = (): string | null => {
    return profile?.avatar_url || user?.user_metadata?.avatar_url || null
  }

  if (loading) {
    return (
      <div className="flex items-center space-x-3">
        <div className="w-8 h-8 rounded-full bg-gray-200 animate-pulse"></div>
        <div className="w-20 h-4 bg-gray-200 rounded animate-pulse"></div>
      </div>
    )
  }

  return (
    <div className="relative" ref={dropdownRef}>
      {/* User Info Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-3 px-3 py-2 rounded-lg hover:bg-gray-50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
      >
        <UserAvatar 
          src={getAvatarUrl()} 
          name={getDisplayName()} 
          size="md" 
        />
        <div className="hidden md:block text-left">
          <div className="text-sm font-medium text-gray-900 truncate max-w-32">
            {getDisplayName()}
          </div>
          <div className="text-xs text-gray-500 truncate max-w-32">
            {profile?.job_title || 'User'}
          </div>
        </div>
        <ChevronDown 
          className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${
            isOpen ? 'rotate-180' : ''
          }`} 
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50 overflow-hidden">
          {/* User Profile Section */}
          <div className="p-4 border-b border-gray-100 bg-gray-50">
            <div className="flex items-center space-x-3">
              <UserAvatar 
                src={getAvatarUrl()} 
                name={getDisplayName()} 
                size="lg" 
              />
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-gray-900 truncate">
                  {getDisplayName()}
                </div>
                <div className="text-xs text-gray-500 truncate">
                  {user?.email}
                </div>
                {profile?.company && (
                  <div className="flex items-center mt-1 text-xs text-gray-500">
                    <Building2 className="w-3 h-3 mr-1" />
                    {profile.company}
                  </div>
                )}
              </div>
            </div>
            
            {/* Additional Profile Info */}
            {profile && (
              <div className="mt-3 space-y-1 text-xs text-gray-600">
                {profile.phone && (
                  <div className="flex items-center">
                    <Phone className="w-3 h-3 mr-2" />
                    {profile.phone}
                  </div>
                )}
                {profile.location && (
                  <div className="flex items-center">
                    <MapPin className="w-3 h-3 mr-2" />
                    {profile.location}
                  </div>
                )}
                {profile.job_title && (
                  <div className="flex items-center">
                    <Briefcase className="w-3 h-3 mr-2" />
                    {profile.job_title}
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Menu Items */}
          <div className="py-2">
            <button
              onClick={() => {
                setIsOpen(false)
                // Navigate to profile settings
                console.log('Navigate to profile settings')
              }}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center"
            >
              <Settings className="w-4 h-4 mr-3 text-gray-400" />
              Profile Settings
            </button>
            
            <button
              onClick={() => {
                setIsOpen(false)
                // Navigate to notifications
                console.log('Navigate to notifications')
              }}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center"
            >
              <Bell className="w-4 h-4 mr-3 text-gray-400" />
              Notifications
            </button>
          </div>

          {/* Sign Out */}
          <div className="border-t border-gray-100">
            <button
              onClick={handleSignOut}
              className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center"
            >
              <LogOut className="w-4 h-4 mr-3" />
              Sign out
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

// Main Header Component
export const Header: React.FC<{
  title?: string
  showNavigation?: boolean
}> = ({ 
  title = 'APE MAXX Logistics', 
  showNavigation = true 
}) => {
  const { user } = useAuth()

  return (
    <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Left Section - Logo and Title */}
          <div className="flex items-center space-x-4">
            <div className="flex-shrink-0">
              {/* Logo */}
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">AM</span>
              </div>
            </div>
            
            <div className="hidden md:block">
              <h1 className="text-xl font-semibold text-gray-900">{title}</h1>
            </div>
          </div>

          {/* Center Section - Navigation (Optional) */}
          {showNavigation && (
            <nav className="hidden lg:flex space-x-8">
              <a 
                href="#dashboard" 
                className="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >
                Dashboard
              </a>
              <a 
                href="#quotes" 
                className="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >
                Quotes
              </a>
              <a 
                href="#shipments" 
                className="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >
                Shipments
              </a>
              <a 
                href="#warehouse" 
                className="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >
                Warehouse
              </a>
            </nav>
          )}

          {/* Right Section - User Menu */}
          <div className="flex items-center space-x-4">
            {/* Notifications */}
            <button className="p-2 text-gray-400 hover:text-gray-500 relative">
              <Bell className="w-5 h-5" />
              {/* Notification badge */}
              <span className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                3
              </span>
            </button>

            {/* User Dropdown */}
            {user ? (
              <UserDropdown />
            ) : (
              <div className="flex items-center space-x-2">
                <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900">
                  Sign In
                </button>
                <button className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                  Sign Up
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}

export default Header
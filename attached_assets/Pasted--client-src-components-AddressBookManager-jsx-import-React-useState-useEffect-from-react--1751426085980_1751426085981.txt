// client/src/components/AddressBookManager.jsx
import React, { useState, useEffect } from 'react';
import { warehouseService } from '../lib/warehouseService';

const AddressBookManager = ({ userId, onSelectAddress, mode = 'manage' }) => {
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [businessTypeFilter, setBusinessTypeFilter] = useState('all');

  const [formData, setFormData] = useState({
    company_name: '',
    contact_person: '',
    street_address: '',
    city: '',
    state: '',
    postal_code: '',
    country: 'US',
    phone: '',
    email: '',
    business_type: 'shipper',
    notes: ''
  });

  const businessTypes = [
    { value: 'shipper', label: 'Shipper', icon: 'üì§' },
    { value: 'consignee', label: 'Consignee', icon: 'üì•' },
    { value: 'carrier', label: 'Carrier', icon: 'üöõ' },
    { value: 'vendor', label: 'Vendor', icon: 'üè™' },
    { value: 'customer', label: 'Customer', icon: 'üë§' },
    { value: 'warehouse', label: 'Warehouse', icon: 'üè≠' },
    { value: 'other', label: 'Other', icon: 'üìã' }
  ];

  useEffect(() => {
    loadAddresses();
  }, [userId, businessTypeFilter]);

  const loadAddresses = async () => {
    try {
      setLoading(true);
      const data = await warehouseService.getAddressBook(
        userId,
        businessTypeFilter === 'all' ? null : businessTypeFilter
      );
      setAddresses(data);
    } catch (err) {
      console.error('Error loading addresses:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const addressData = {
        ...formData,
        user_id: userId
      };

      if (editingAddress) {
        await warehouseService.updateAddressBookEntry(editingAddress.id, addressData, userId);
      } else {
        await warehouseService.createAddressBookEntry(addressData);
      }

      await loadAddresses();
      resetForm();
    } catch (err) {
      console.error('Error saving address:', err);
      setError(err.message);
    }
  };

  const handleEdit = (address) => {
    setEditingAddress(address);
    setFormData({
      company_name: address.company_name || '',
      contact_person: address.contact_person || '',
      street_address: address.street_address || '',
      city: address.city || '',
      state: address.state || '',
      postal_code: address.postal_code || '',
      country: address.country || 'US',
      phone: address.phone || '',
      email: address.email || '',
      business_type: address.business_type || 'shipper',
      notes: address.notes || ''
    });
    setShowForm(true);
  };

  const handleDelete = async (addressId) => {
    if (window.confirm('Are you sure you want to delete this address?')) {
      try {
        await warehouseService.deleteAddressBookEntry(addressId, userId);
        await loadAddresses();
      } catch (err) {
        console.error('Error deleting address:', err);
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      company_name: '',
      contact_person: '',
      street_address: '',
      city: '',
      state: '',
      postal_code: '',
      country: 'US',
      phone: '',
      email: '',
      business_type: 'shipper',
      notes: ''
    });
    setEditingAddress(null);
    setShowForm(false);
  };

  const filteredAddresses = addresses.filter(address =>
    address.company_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    address.contact_person?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    address.city?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    address.email?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getBusinessTypeInfo = (type) => {
    const info = businessTypes.find(bt => bt.value === type);
    return info || { value: type, label: type, icon: 'üìã' };
  };

  if (loading) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-8 bg-gray-200 rounded w-1/3"></div>
        <div className="space-y-3">
          <div className="h-20 bg-gray-200 rounded"></div>
          <div className="h-20 bg-gray-200 rounded"></div>
          <div className="h-20 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center">
            üìá Address Book
          </h2>
          <p className="text-gray-600">Manage shippers, consignees, and business contacts</p>
        </div>
        {mode === 'manage' && (
          <button
            onClick={() => setShowForm(true)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            ‚ûï Add Address
          </button>
        )}
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <div className="text-red-400">‚ö†Ô∏è</div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Error</h3>
              <div className="mt-2 text-sm text-red-700">{error}</div>
              <button
                onClick={() => setError(null)}
                className="mt-2 text-sm text-red-600 hover:text-red-500"
              >
                Dismiss
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Search and Filters */}
      <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
        <div className="flex flex-wrap gap-4 items-center">
          <div className="flex-1 min-w-64">
            <input
              type="text"
              placeholder="Search addresses (company, contact, city, email)..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={businessTypeFilter}
            onChange={(e) => setBusinessTypeFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Types</option>
            {businessTypes.map(type => (
              <option key={type.value} value={type.value}>
                {type.icon} {type.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Address Form */}
      {showForm && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-lg font-semibold text-gray-900">
              {editingAddress ? 'Edit Address' : 'Add New Address'}
            </h3>
            <button
              onClick={resetForm}
              className="text-gray-400 hover:text-gray-600"
            >
              ‚úï
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Company & Contact Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Company Name *
                </label>
                <input
                  type="text"
                  value={formData.company_name}
                  onChange={(e) => setFormData({...formData, company_name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contact Person
                </label>
                <input
                  type="text"
                  value={formData.contact_person}
                  onChange={(e) => setFormData({...formData, contact_person: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            {/* Address Information */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Street Address
                </label>
                <input
                  type="text"
                  value={formData.street_address}
                  onChange={(e) => setFormData({...formData, street_address: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">City</label>
                  <input
                    type="text"
                    value={formData.city}
                    onChange={(e) => setFormData({...formData, city: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">State</label>
                  <input
                    type="text"
                    value={formData.state}
                    onChange={(e) => setFormData({...formData, state: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                  <input
                    type="text"
                    value={formData.postal_code}
                    onChange={(e) => setFormData({...formData, postal_code: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Country</label>
                  <select
                    value={formData.country}
                    onChange={(e) => setFormData({...formData, country: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="US">United States</option>
                    <option value="CA">Canada</option>
                    <option value="MX">Mexico</option>
                    <option value="GB">United Kingdom</option>
                    <option value="DE">Germany</option>
                    <option value="FR">France</option>
                    <option value="JP">Japan</option>
                    <option value="CN">China</option>
                    <option value="IN">India</option>
                    <option value="BR">Brazil</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Contact & Business Information */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Business Type</label>
                <select
                  value={formData.business_type}
                  onChange={(e) => setFormData({...formData, business_type: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {businessTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.icon} {type.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Notes */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
              <textarea
                value={formData.notes}
                onChange={(e) => setFormData({...formData, notes: e.target.value})}
                rows="3"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Additional notes or special instructions..."
              />
            </div>

            {/* Form Actions */}
            <div className="flex gap-4 pt-6 border-t border-gray-200">
              <button
                type="submit"
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
              >
                {editingAddress ? 'Update Address' : 'Add Address'}
              </button>
              <button
                type="button"
                onClick={resetForm}
                className="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 font-medium"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Address List */}
      <div className="space-y-4">
        {filteredAddresses.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="text-gray-400 text-6xl mb-4">üìá</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No addresses found</h3>
            <p className="text-gray-600 mb-6">
              {searchTerm || businessTypeFilter !== 'all' 
                ? 'Try adjusting your search or filters.' 
                : 'Add your first address to get started.'
              }
            </p>
            {mode === 'manage' && !searchTerm && businessTypeFilter === 'all' && (
              <button
                onClick={() => setShowForm(true)}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
              >
                Add First Address
              </button>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredAddresses.map(address => {
              const businessTypeInfo = getBusinessTypeInfo(address.business_type);
              
              return (
                <div 
                  key={address.id} 
                  className={`bg-white rounded-lg shadow-sm border border-gray-200 p-4 ${
                    mode === 'select' ? 'cursor-pointer hover:bg-blue-50 hover:border-blue-200' : ''
                  }`}
                  onClick={() => mode === 'select' && onSelectAddress && onSelectAddress(address)}
                >
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{businessTypeInfo.icon}</span>
                      <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                        businessTypeInfo.value === 'shipper' ? 'bg-blue-100 text-blue-800' :
                        businessTypeInfo.value === 'consignee' ? 'bg-green-100 text-green-800' :
                        businessTypeInfo.value === 'carrier' ? 'bg-purple-100 text-purple-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {businessTypeInfo.label}
                      </div>
                    </div>
                    {mode === 'manage' && (
                      <div className="flex space-x-1">
                        <button
                          onClick={() => handleEdit(address)}
                          className="text-gray-400 hover:text-blue-600 text-sm"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          onClick={() => handleDelete(address.id)}
                          className="text-gray-400 hover:text-red-600 text-sm"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <div>
                      <div className="font-semibold text-gray-900 truncate">
                        {address.company_name}
                      </div>
                      {address.contact_person && (
                        <div className="text-sm text-gray-600 truncate">
                          Contact: {address.contact_person}
                        </div>
                      )}
                    </div>

                    {address.street_address && (
                      <div className="text-sm text-gray-600">
                        <div className="truncate">{address.street_address}</div>
                        <div className="truncate">
                          {[address.city, address.state, address.postal_code].filter(Boolean).join(', ')}
                          {address.country && address.country !== 'US' && `, ${address.country}`}
                        </div>
                      </div>
                    )}

                    <div className="flex flex-wrap gap-2 text-xs">
                      {address.phone && (
                        <div className="flex items-center text-gray-600">
                          üìû {address.phone}
                        </div>
                      )}
                      {address.email && (
                        <div className="flex items-center text-gray-600 truncate">
                          ‚úâÔ∏è {address.email}
                        </div>
                      )}
                    </div>

                    {address.notes && (
                      <div className="text-xs text-gray-500 line-clamp-2">
                        {address.notes}
                      </div>
                    )}
                  </div>

                  {mode === 'select' && (
                    <div className="mt-3 pt-3 border-t border-gray-100">
                      <div className="text-center text-sm text-blue-600 font-medium">
                        Click to select
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default AddressBookManager;
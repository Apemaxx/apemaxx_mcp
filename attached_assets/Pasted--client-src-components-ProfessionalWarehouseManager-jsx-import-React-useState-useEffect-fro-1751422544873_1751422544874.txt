// client/src/components/ProfessionalWarehouseManager.jsx
import React, { useState, useEffect } from 'react';
import { 
  Package, Plus, Search, Filter, Download, FileText, 
  MapPin, Calendar, Truck, Plane, Ship, CheckCircle2, 
  Clock, AlertCircle, Edit3, Eye, Upload, X, Building,
  Users, Archive, Settings
} from 'lucide-react';
import { warehouseService } from '../lib/warehouseService';

const ProfessionalWarehouseManager = ({ userId }) => {
  const [receipts, setReceipts] = useState([]);
  const [groupedReceipts, setGroupedReceipts] = useState({});
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState('location'); // 'location', 'list', 'cards'
  const [selectedLocation, setSelectedLocation] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [selectedReceipt, setSelectedReceipt] = useState(null);
  const [locations, setLocations] = useState([]);
  const [addressBook, setAddressBook] = useState([]);

  useEffect(() => {
    loadInitialData();
  }, [userId]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      const [statsData, locationsData, addressBookData] = await Promise.all([
        warehouseService.getDashboardStats(userId),
        warehouseService.getWarehouseLocations(),
        warehouseService.getAddressBook(userId)
      ]);
      
      setStats(statsData);
      setLocations(locationsData);
      setAddressBook(addressBookData);
      
      await loadReceipts();
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadReceipts = async () => {
    try {
      if (viewMode === 'location') {
        const grouped = await warehouseService.getReceiptsByLocation(userId);
        setGroupedReceipts(grouped);
      } else {
        const receiptsList = await warehouseService.getReceipts(
          userId, 
          50, 
          selectedLocation !== 'all' ? selectedLocation : null,
          selectedStatus !== 'all' ? selectedStatus : null
        );
        setReceipts(receiptsList);
      }
    } catch (error) {
      console.error('Error loading receipts:', error);
    }
  };

  useEffect(() => {
    loadReceipts();
  }, [viewMode, selectedLocation, selectedStatus]);

  const handleSearch = async () => {
    if (!searchTerm.trim()) {
      loadReceipts();
      return;
    }
    try {
      const results = await warehouseService.searchReceipts(userId, searchTerm);
      setReceipts(results);
      setViewMode('list');
    } catch (error) {
      console.error('Search error:', error);
    }
  };

  const StatusIcon = ({ status }) => {
    const icons = {
      'received_on_hand': Package,
      'released_by_air': Plane,
      'released_by_ocean': Ship,
      'shipped': Truck
    };
    const Icon = icons[status] || Package;
    return <Icon className="w-4 h-4" />;
  };

  const StatusBadge = ({ status }) => {
    const colorClass = warehouseService.getStatusColor(status);
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${colorClass} flex items-center space-x-1`}>
        <StatusIcon status={status} />
        <span>{warehouseService.formatStatus(status)}</span>
      </span>
    );
  };

  const WarehouseReceiptCard = ({ receipt, compact = false }) => {
    if (compact) {
      return (
        <div className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer bg-white">
          <div className="flex justify-between items-start mb-3">
            <div>
              <h3 className="font-bold text-lg text-blue-600">{receipt.receipt_number || receipt.wr_number}</h3>
              <p className="text-sm text-gray-600">{new Date(receipt.received_date).toLocaleDateString()}</p>
            </div>
            <StatusBadge status={receipt.status} />
          </div>
          
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <p className="font-medium text-gray-700">Shipper:</p>
              <p className="text-gray-600 truncate">{receipt.shipper_name}</p>
            </div>
            <div>
              <p className="font-medium text-gray-700">Consignee:</p>
              <p className="text-gray-600 truncate">{receipt.consignee_name}</p>
            </div>
          </div>
          
          <div className="mt-3 flex justify-between items-center text-sm">
            <div className="flex space-x-4">
              <span className="text-gray-600">{receipt.total_pieces} pcs</span>
              <span className="text-gray-600">{receipt.total_weight_lb} lbs</span>
              {receipt.total_volume_ft3 && (
                <span className="text-gray-600">{Math.round(receipt.total_volume_ft3)} ftÂ³</span>
              )}
            </div>
            <button
              onClick={() => setSelectedReceipt(receipt)}
              className="text-blue-600 hover:text-blue-800 font-medium"
            >
              View Details
            </button>
          </div>
        </div>
      );
    }

    // Full PDF-style receipt display
    return (
      <div className="bg-white border border-gray-300 rounded-lg shadow-lg p-6 mb-6">
        {/* Header */}
        <div className="border-b-2 border-blue-600 pb-4 mb-6">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-blue-600">WAREHOUSE RECEIPT</h1>
              <p className="text-sm text-gray-600 mt-1">Manage warehouse receipts and inventory</p>
            </div>
            <div className="text-right">
              <div className="bg-blue-50 p-3 rounded-lg border">
                <h2 className="text-xl font-bold text-blue-800">{receipt.receipt_number || receipt.wr_number}</h2>
                <p className="text-sm text-gray-600">{new Date(receipt.received_date).toLocaleDateString()} {new Date(receipt.received_date).toLocaleTimeString()}</p>
              </div>
            </div>
          </div>
          
          <div className="mt-4 flex justify-between items-center">
            <div>
              <p className="text-sm text-gray-600">Received by:</p>
              <p className="font-medium">{receipt.received_by}</p>
            </div>
            <StatusBadge status={receipt.status} />
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-2 gap-8 mb-6">
          {/* Shipper Information */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-3 border-b border-gray-200 pb-2">SHIPPER</h3>
            <div className="space-y-2">
              <p className="font-medium text-gray-900">{receipt.shipper_name}</p>
              {receipt.shipper_address && (
                <p className="text-sm text-gray-600">{receipt.shipper_address}</p>
              )}
              <div className="text-sm text-gray-600">
                {receipt.shipper_city && receipt.shipper_state && (
                  <p>{receipt.shipper_city}, {receipt.shipper_state} {receipt.shipper_postal}</p>
                )}
                {receipt.shipper_phone && <p>Tel: {receipt.shipper_phone}</p>}
              </div>
            </div>
          </div>

          {/* Consignee Information */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-3 border-b border-gray-200 pb-2">CONSIGNEE</h3>
            <div className="space-y-2">
              <p className="font-medium text-gray-900">{receipt.consignee_name}</p>
              {receipt.consignee_address && (
                <p className="text-sm text-gray-600">{receipt.consignee_address}</p>
              )}
              <div className="text-sm text-gray-600">
                {receipt.consignee_city && receipt.consignee_state && (
                  <p>{receipt.consignee_city}, {receipt.consignee_state} {receipt.consignee_postal}</p>
                )}
                {receipt.consignee_phone && <p>Tel: {receipt.consignee_phone}</p>}
              </div>
            </div>
          </div>
        </div>

        {/* Transportation & Reference Info */}
        <div className="grid grid-cols-3 gap-6 mb-6 p-4 bg-gray-50 rounded-lg">
          <div>
            <h4 className="font-medium text-gray-700 mb-2">CARRIER & TRACKING</h4>
            <div className="space-y-1 text-sm">
              <p><span className="text-gray-600">Carrier:</span> {receipt.carrier_name}</p>
              <p><span className="text-gray-600">Driver:</span> {receipt.driver_name}</p>
              <p><span className="text-gray-600">Tracking #:</span> {receipt.tracking_number}</p>
              {receipt.pro_number && <p><span className="text-gray-600">PRO #:</span> {receipt.pro_number}</p>}
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-700 mb-2">REFERENCE NUMBERS</h4>
            <div className="space-y-1 text-sm">
              {receipt.booking_reference && <p><span className="text-gray-600">Booking:</span> {receipt.booking_reference}</p>}
              {receipt.shipment_id && <p><span className="text-gray-600">Shipment ID:</span> {receipt.shipment_id}</p>}
              {receipt.po_number && <p><span className="text-gray-600">PO #:</span> {receipt.po_number}</p>}
              {receipt.invoice_number && <p><span className="text-gray-600">Invoice #:</span> {receipt.invoice_number}</p>}
            </div>
          </div>

          <div>
            <h4 className="font-medium text-gray-700 mb-2">LOCATION</h4>
            <div className="space-y-1 text-sm">
              <p className="flex items-center"><MapPin className="w-3 h-3 mr-1" /> {receipt.warehouse_location_name || 'Not specified'}</p>
              {receipt.consol_plan_name && (
                <p className="flex items-center"><Calendar className="w-3 h-3 mr-1" /> {receipt.consol_plan_name}</p>
              )}
            </div>
          </div>
        </div>

        {/* Cargo Details Table */}
        <div className="mb-6">
          <h3 className="font-semibold text-gray-900 mb-3 border-b border-gray-200 pb-2">CARGO DETAILS</h3>
          <div className="overflow-x-auto">
            <table className="w-full border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Pcs</th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Package</th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Dimensions</th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Description</th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Weight</th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium">Volume</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="border border-gray-300 px-3 py-2 text-sm">{receipt.total_pieces}</td>
                  <td className="border border-gray-300 px-3 py-2 text-sm">{receipt.package_type || 'Pallet'}</td>
                  <td className="border border-gray-300 px-3 py-2 text-sm">
                    {receipt.dimensions_length && receipt.dimensions_width && receipt.dimensions_height 
                      ? `${receipt.dimensions_length}x${receipt.dimensions_width}x${receipt.dimensions_height}in`
                      : 'Not specified'
                    }
                  </td>
                  <td className="border border-gray-300 px-3 py-2 text-sm">{receipt.cargo_description}</td>
                  <td className="border border-gray-300 px-3 py-2 text-sm">
                    <div>{receipt.total_weight_lb} lbs</div>
                    <div className="text-xs text-gray-500">{(receipt.total_weight_lb * 0.453592).toFixed(2)} kg</div>
                  </td>
                  <td className="border border-gray-300 px-3 py-2 text-sm">
                    {receipt.total_volume_ft3 && (
                      <div>
                        <div>{Math.round(receipt.total_volume_ft3)} ftÂ³</div>
                        {receipt.total_volume_vlb && (
                          <div className="text-xs text-gray-500">{Math.round(receipt.total_volume_vlb)} VLB</div>
                        )}
                      </div>
                    )}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {/* Notes & Actions */}
        <div className="flex justify-between items-start">
          <div className="flex-1 mr-6">
            {receipt.notes && (
              <div>
                <h4 className="font-medium text-gray-700 mb-2">NOTES</h4>
                <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded">{receipt.notes}</p>
              </div>
            )}
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={() => setSelectedReceipt(receipt)}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm flex items-center space-x-1"
            >
              <Edit3 className="w-4 h-4" />
              <span>Edit</span>
            </button>
            <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 text-sm flex items-center space-x-1">
              <Download className="w-4 h-4" />
              <span>PDF</span>
            </button>
          </div>
        </div>

        {/* Attachments */}
        {receipt.attachment_count > 0 && (
          <div className="mt-4 pt-4 border-t border-gray-200">
            <h4 className="font-medium text-gray-700 mb-2">ATTACHMENTS ({receipt.attachment_count})</h4>
            <div className="flex items-center space-x-2 text-sm text-blue-600">
              <FileText className="w-4 h-4" />
              <span>View attachments</span>
            </div>
          </div>
        )}
      </div>
    );
  };

  const CreateReceiptModal = () => {
    const [formData, setFormData] = useState({
      tracking_number: '',
      pro_number: '',
      booking_reference: '',
      shipment_id: '',
      carrier_name: '',
      driver_name: '',
      total_pieces: 0,
      total_weight_lb: 0,
      dimensions_length: '',
      dimensions_width: '',
      dimensions_height: '',
      package_type: 'Pallet',
      cargo_description: 'GENERAL CARGO',
      received_by: '',
      shipper_id: '',
      consignee_id: '',
      warehouse_location_id: '',
      status: warehouseService.STATUSES.RECEIVED_ON_HAND,
      notes: ''
    });
    const [files, setFiles] = useState([]);
    const [creating, setCreating] = useState(false);

    const handleSubmit = async (e) => {
      e.preventDefault();
      try {
        setCreating(true);
        await warehouseService.createReceipt({
          ...formData,
          user_id: userId
        }, files);
        
        setShowCreateForm(false);
        await loadInitialData();
        alert('Warehouse receipt created successfully!');
      } catch (error) {
        console.error('Error creating receipt:', error);
        alert('Error creating receipt: ' + error.message);
      } finally {
        setCreating(false);
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-6xl w-full mx-4 max-h-[95vh] overflow-y-auto">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold">Create Warehouse Receipt</h3>
            <button onClick={() => setShowCreateForm(false)} className="text-gray-500 hover:text-gray-700">
              <X className="w-6 h-6" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Reference Numbers */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">Reference Numbers</h4>
              <div className="grid grid-cols-4 gap-4">
                <input
                  type="text"
                  placeholder="Tracking Number *"
                  value={formData.tracking_number}
                  onChange={(e) => setFormData({...formData, tracking_number: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                  required
                />
                <input
                  type="text"
                  placeholder="PRO Number"
                  value={formData.pro_number}
                  onChange={(e) => setFormData({...formData, pro_number: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="text"
                  placeholder="Booking Reference"
                  value={formData.booking_reference}
                  onChange={(e) => setFormData({...formData, booking_reference: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="text"
                  placeholder="Shipment ID"
                  value={formData.shipment_id}
                  onChange={(e) => setFormData({...formData, shipment_id: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
              </div>
            </div>

            {/* Carrier Information */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">Carrier Information</h4>
              <div className="grid grid-cols-3 gap-4">
                <input
                  type="text"
                  placeholder="Carrier Name *"
                  value={formData.carrier_name}
                  onChange={(e) => setFormData({...formData, carrier_name: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                  required
                />
                <input
                  type="text"
                  placeholder="Driver Name"
                  value={formData.driver_name}
                  onChange={(e) => setFormData({...formData, driver_name: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="text"
                  placeholder="Received By *"
                  value={formData.received_by}
                  onChange={(e) => setFormData({...formData, received_by: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                  required
                />
              </div>
            </div>

            {/* Addresses */}
            <div className="grid grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-3">Shipper</h4>
                <select
                  value={formData.shipper_id}
                  onChange={(e) => setFormData({...formData, shipper_id: e.target.value})}
                  className="w-full border border-gray-300 rounded px-3 py-2"
                >
                  <option value="">Select Shipper</option>
                  {addressBook.filter(addr => addr.business_type === 'shipper').map(addr => (
                    <option key={addr.id} value={addr.id}>{addr.company_name}</option>
                  ))}
                </select>
              </div>
              <div>
                <h4 className="font-medium text-gray-900 mb-3">Consignee</h4>
                <select
                  value={formData.consignee_id}
                  onChange={(e) => setFormData({...formData, consignee_id: e.target.value})}
                  className="w-full border border-gray-300 rounded px-3 py-2"
                >
                  <option value="">Select Consignee</option>
                  {addressBook.filter(addr => addr.business_type === 'consignee').map(addr => (
                    <option key={addr.id} value={addr.id}>{addr.company_name}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Cargo Details */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">Cargo Details</h4>
              <div className="grid grid-cols-6 gap-4">
                <input
                  type="number"
                  placeholder="Pieces"
                  value={formData.total_pieces}
                  onChange={(e) => setFormData({...formData, total_pieces: parseInt(e.target.value) || 0})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="number"
                  step="0.01"
                  placeholder="Weight (lbs)"
                  value={formData.total_weight_lb}
                  onChange={(e) => setFormData({...formData, total_weight_lb: parseFloat(e.target.value) || 0})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="number"
                  step="0.01"
                  placeholder="Length (in)"
                  value={formData.dimensions_length}
                  onChange={(e) => setFormData({...formData, dimensions_length: parseFloat(e.target.value) || 0})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="number"
                  step="0.01"
                  placeholder="Width (in)"
                  value={formData.dimensions_width}
                  onChange={(e) => setFormData({...formData, dimensions_width: parseFloat(e.target.value) || 0})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <input
                  type="number"
                  step="0.01"
                  placeholder="Height (in)"
                  value={formData.dimensions_height}
                  onChange={(e) => setFormData({...formData, dimensions_height: parseFloat(e.target.value) || 0})}
                  className="border border-gray-300 rounded px-3 py-2"
                />
                <select
                  value={formData.package_type}
                  onChange={(e) => setFormData({...formData, package_type: e.target.value})}
                  className="border border-gray-300 rounded px-3 py-2"
                >
                  <option value="Pallet">Pallet</option>
                  <option value="Box">Box</option>
                  <option value="Crate">Crate</option>
                  <option value="Carton">Carton</option>
                </select>
              </div>
            </div>

            {/* Location & Status */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Warehouse Location</label>
                <select
                  value={formData.warehouse_location_id}
                  onChange={(e) => setFormData({...formData, warehouse_location_id: e.target.value})}
                  className="w-full border border-gray-300 rounded px-3 py-2"
                >
                  <option value="">Select Location</option>
                  {locations.map(loc => (
                    <option key={loc.id} value={loc.id}>{loc.location_name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({...formData, status: e.target.value})}
                  className="w-full border border-gray-300 rounded px-3 py-2"
                >
                  <option value={warehouseService.STATUSES.RECEIVED_ON_HAND}>Received On Hand</option>
                  <option value={warehouseService.STATUSES.RELEASED_BY_AIR}>Released by Air</option>
                  <option value={warehouseService.STATUSES.RELEASED_BY_OCEAN}>Released by Ocean</option>
                  <option value={warehouseService.STATUSES.SHIPPED}>Shipped</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Cargo Description</label>
              <textarea
                value={formData.cargo_description}
                onChange={(e) => setFormData({...formData, cargo_description: e.target.value})}
                className="w-full border border-gray-300 rounded px-3 py-2"
                rows={2}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
              <textarea
                value={formData.notes}
                onChange={(e) => setFormData({...formData, notes: e.target.value})}
                className="w-full border border-gray-300 rounded px-3 py-2"
                rows={2}
              />
            </div>

            {/* File Upload */}
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-sm text-gray-600 mb-2">Upload Documents & Photos</p>
              <input
                type="file"
                multiple
                onChange={(e) => setFiles(Array.from(e.target.files))}
                className="hidden"
                id="file-upload"
                accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.gif"
              />
              <label
                htmlFor="file-upload"
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 cursor-pointer"
              >
                Choose Files
              </label>
              {files.length > 0 && (
                <p className="text-sm text-gray-600 mt-2">{files.length} file(s) selected</p>
              )}
            </div>

            <div className="flex justify-end space-x-3 pt-4 border-t">
              <button
                type="button"
                onClick={() => setShowCreateForm(false)}
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={creating}
                className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {creating ? 'Creating...' : 'Create Receipt'}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Warehouse Management</h1>
            <p className="text-gray-600">Professional warehouse receipt management system</p>
          </div>
          <button
            onClick={() => setShowCreateForm(true)}
            className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            <Plus className="w-5 h-5" />
            <span>New Receipt</span>
          </button>
        </div>

        {/* Stats Dashboard */}
        <div className="grid grid-cols-6 gap-4 mb-6">
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Package className="w-5 h-5 text-blue-600" />
              <div>
                <p className="text-2xl font-bold text-blue-600">{stats.total_receipts || 0}</p>
                <p className="text-sm text-gray-600">Total Receipts</p>
              </div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Package className="w-5 h-5 text-green-600" />
              <div>
                <p className="text-2xl font-bold text-green-600">{stats.by_status?.received_on_hand || 0}</p>
                <p className="text-sm text-gray-600">On Hand</p>
              </div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Plane className="w-5 h-5 text-yellow-600" />
              <div>
                <p className="text-2xl font-bold text-yellow-600">{stats.by_status?.released_by_air || 0}</p>
                <p className="text-sm text-gray-600">Released Air</p>
              </div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Ship className="w-5 h-5 text-purple-600" />
              <div>
                <p className="text-2xl font-bold text-purple-600">{stats.by_status?.released_by_ocean || 0}</p>
                <p className="text-sm text-gray-600">Released Ocean</p>
              </div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Truck className="w-5 h-5 text-green-600" />
              <div>
                <p className="text-2xl font-bold text-green-600">{stats.by_status?.shipped || 0}</p>
                <p className="text-sm text-gray-600">Shipped</p>
              </div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="flex items-center space-x-2">
              <Archive className="w-5 h-5 text-gray-600" />
              <div>
                <p className="text-2xl font-bold text-gray-600">{Math.round(stats.total_volume || 0)}</p>
                <p className="text-sm text-gray-600">Total ftÂ³</p>
              </div>
            </div>
          </div>
        </div>

        {/* Controls */}
        <div className="flex space-x-4 mb-6">
          <div className="flex-1 flex space-x-2">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                placeholder="Search by WR number, tracking, shipper, consignee..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              onClick={handleSearch}
              className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
            >
              Search
            </button>
          </div>
          <div className="flex items-center space-x-4">
            <select
              value={viewMode}
              onChange={(e) => setViewMode(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2"
            >
              <option value="location">By Location</option>
              <option value="list">List View</option>
              <option value="cards">Card View</option>
            </select>
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2"
            >
              <option value="all">All Status</option>
              <option value="received_on_hand">Received On Hand</option>
              <option value="released_by_air">Released by Air</option>
              <option value="released_by_ocean">Released by Ocean</option>
              <option value="shipped">Shipped</option>
            </select>
          </div>
        </div>
      </div>

      {/* Content */}
      {viewMode === 'location' ? (
        <div className="space-y-8">
          {Object.entries(groupedReceipts).map(([location, locationReceipts]) => (
            <div key={location} className="bg-white rounded-lg shadow border">
              <div className="bg-gray-50 px-6 py-4 border-b flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Building className="w-5 h-5 text-gray-600" />
                  <h2 className="text-lg font-semibold text-gray-900">{location}</h2>
                  <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                    {locationReceipts.length} receipts
                  </span>
                </div>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {locationReceipts.map(receipt => (
                    <WarehouseReceiptCard key={receipt.id} receipt={receipt} compact={true} />
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : viewMode === 'cards' ? (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {receipts.map(receipt => (
            <WarehouseReceiptCard key={receipt.id} receipt={receipt} compact={true} />
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          {receipts.map(receipt => (
            <WarehouseReceiptCard key={receipt.id} receipt={receipt} compact={false} />
          ))}
        </div>
      )}

      {/* Modals */}
      {showCreateForm && <CreateReceiptModal />}
    </div>
  );
};

export default ProfessionalWarehouseManager;
# APE MAXX Logistics Frontend Setup Guide

## üöÄ Quick Start

### 1. Prerequisites
- Node.js 18+ installed
- Supabase project with ID: `bqmpupymchanohpfzglw`
- Access to Supabase API keys

### 2. Environment Setup

Create a `.env.local` file in your project root:

```bash
# Supabase Configuration
VITE_SUPABASE_URL=https://bqmpupymchanohpfzglw.supabase.co
VITE_SUPABASE_ANON_KEY=your_actual_anon_key_here

# Optional API Keys
VITE_TAI_API_KEY=your_tai_api_key
VITE_GOOGLE_MAPS_API_KEY=your_google_maps_key
```

### 3. Install Dependencies

```bash
npm install @supabase/supabase-js @supabase/auth-helpers-react
npm install react react-dom react-router-dom
npm install lucide-react tailwindcss
npm install @types/react @types/react-dom typescript
```

### 4. File Structure

```
src/
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îî‚îÄ‚îÄ supabase.ts          # Supabase client & helpers
‚îú‚îÄ‚îÄ contexts/
‚îÇ   ‚îî‚îÄ‚îÄ AuthContext.tsx      # Authentication context
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ Header/
‚îÇ       ‚îî‚îÄ‚îÄ Header.tsx       # Header with user profile
‚îú‚îÄ‚îÄ App.tsx                  # Main app component
‚îî‚îÄ‚îÄ main.tsx                 # Entry point
```

## üîß Configuration Details

### Supabase Setup

1. **Get your API keys from Supabase Dashboard:**
   - Go to [Supabase Dashboard](https://supabase.com/dashboard)
   - Select your project: `bqmpupymchanohpfzglw`
   - Navigate to Settings ‚Üí API
   - Copy the `anon` key and replace in `.env.local`

2. **Database Schema Required:**
   The code expects a `profiles` table that extends the auth.users table:

   ```sql
   -- Create profiles table
   CREATE TABLE profiles (
       id UUID PRIMARY KEY REFERENCES auth.users(id),
       email TEXT,
       name TEXT,
       company TEXT,
       phone TEXT,
       language TEXT DEFAULT 'en',
       avatar_url TEXT,
       bio TEXT,
       location TEXT,
       website TEXT,
       job_title TEXT,
       organization_id INTEGER,
       created_at TIMESTAMPTZ DEFAULT NOW(),
       updated_at TIMESTAMPTZ DEFAULT NOW()
   );

   -- Enable RLS
   ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

   -- Create policies
   CREATE POLICY "Users can view own profile" ON profiles
   FOR SELECT USING (auth.uid() = id);

   CREATE POLICY "Users can update own profile" ON profiles
   FOR UPDATE USING (auth.uid() = id);

   -- Create trigger to auto-create profile
   CREATE OR REPLACE FUNCTION public.handle_new_user()
   RETURNS trigger AS $$
   BEGIN
     INSERT INTO public.profiles (id, email, name, avatar_url)
     VALUES (
       new.id,
       new.email,
       new.raw_user_meta_data->>'name',
       new.raw_user_meta_data->>'avatar_url'
     );
     RETURN new;
   END;
   $$ LANGUAGE plpgsql SECURITY DEFINER;

   CREATE TRIGGER on_auth_user_created
     AFTER INSERT ON auth.users
     FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
   ```

### 3. Authentication Configuration

1. **Enable Email Authentication in Supabase:**
   - Go to Authentication ‚Üí Settings
   - Enable Email provider
   - Set up email templates (optional)

2. **Configure Site URL:**
   - Set Site URL to your development URL (e.g., `http://localhost:5173`)
   - Add redirect URLs for production

## üéØ Features Explained

### Header Component Features

1. **User Avatar Display:**
   - Shows user profile picture if available
   - Falls back to initials if no picture
   - Handles loading states gracefully

2. **User Dropdown Menu:**
   - Displays complete user information
   - Shows profile details (company, phone, location)
   - Provides navigation to settings
   - Secure sign-out functionality

3. **Responsive Design:**
   - Mobile-friendly dropdown
   - Hides/shows elements based on screen size
   - Touch-friendly interface

### Authentication Context Features

1. **Complete Auth Management:**
   - Sign in/up/out functionality
   - Password reset capability
   - Automatic session handling
   - Profile data synchronization

2. **Real-time Updates:**
   - Listens for auth state changes
   - Automatically updates user profile
   - Handles session persistence

3. **Error Handling:**
   - Comprehensive error management
   - User-friendly error messages
   - Retry mechanisms

## üîí Security Best Practices

### 1. Row Level Security (RLS)
- All tables have RLS enabled
- Users can only access their own data
- Policies enforce data isolation

### 2. API Key Security
- Environment variables for sensitive data
- Never commit keys to version control
- Use different keys for dev/prod

### 3. Authentication
- Secure password requirements
- Session timeout handling
- CSRF protection built-in

## üì± Usage Examples

### Basic Usage

```tsx
import { AuthProvider } from './contexts/AuthContext'
import Header from './components/Header/Header'

function App() {
  return (
    <AuthProvider>
      <Header title="My Logistics Platform" />
      {/* Your app content */}
    </AuthProvider>
  )
}
```

### Custom Header

```tsx
<Header 
  title="Custom Title" 
  showNavigation={false} 
/>
```

### Accessing User Data

```tsx
import { useAuth } from './contexts/AuthContext'

function MyComponent() {
  const { user, profile, loading } = useAuth()

  if (loading) return <div>Loading...</div>
  
  return (
    <div>
      <h1>Welcome, {profile?.name || user?.email}</h1>
      <p>Company: {profile?.company}</p>
    </div>
  )
}
```

## üêõ Troubleshooting

### Common Issues

1. **"Invalid API key" error:**
   - Check your `.env.local` file
   - Ensure VITE_SUPABASE_ANON_KEY is correct
   - Restart your development server

2. **User profile not loading:**
   - Verify the profiles table exists
   - Check RLS policies are set up
   - Ensure the trigger is created

3. **Authentication not working:**
   - Check Supabase project settings
   - Verify site URL configuration
   - Check browser console for errors

### Debug Mode

Enable debug logging by setting:
```bash
VITE_DEBUG=true
```

This will log authentication events and API calls to the console.

## üöÄ Next Steps

1. **Customize the Design:**
   - Modify Tailwind classes in components
   - Add your company branding
   - Customize color scheme

2. **Add More Features:**
   - Profile editing functionality
   - File upload for avatars
   - Notification system

3. **Integrate with Your Backend:**
   - Connect to TAI API
   - Add freight management features
   - Implement business logic

## üìû Support

If you encounter issues:
1. Check the browser console for errors
2. Verify Supabase dashboard for authentication logs
3. Test with a simple sign-up flow
4. Check network tab for API call failures

## ‚úÖ Verification Checklist

- [ ] Environment variables configured
- [ ] Supabase project accessible
- [ ] Database schema created
- [ ] RLS policies enabled
- [ ] Authentication working
- [ ] Profile data syncing
- [ ] Header displaying correctly
- [ ] Dropdown menu functional
- [ ] Sign out working
- [ ] Responsive design verified

This setup provides a robust, secure, and scalable foundation for your APE MAXX Logistics platform!
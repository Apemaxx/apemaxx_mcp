// client/src/components/FileUploadManager.jsx
import React, { useState, useRef, useEffect } from 'react';
import { warehouseService } from '../lib/warehouseService';

const FileUploadManager = ({ receiptId, userId, onFilesChange }) => {
  const [attachments, setAttachments] = useState([]);
  const [uploading, setUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [error, setError] = useState(null);
  const fileInputRef = useRef(null);

  const allowedFileTypes = [
    'application/pdf',
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/gif',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'text/plain',
    'text/csv'
  ];

  const maxFileSize = 10 * 1024 * 1024; // 10MB

  useEffect(() => {
    if (receiptId) {
      loadAttachments();
    }
  }, [receiptId]);

  const loadAttachments = async () => {
    try {
      const data = await warehouseService.getReceiptAttachments(receiptId);
      setAttachments(data);
      if (onFilesChange) onFilesChange(data);
    } catch (err) {
      console.error('Error loading attachments:', err);
      setError('Failed to load attachments');
    }
  };

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(Array.from(e.dataTransfer.files));
    }
  };

  const handleFileInput = (e) => {
    if (e.target.files && e.target.files[0]) {
      handleFiles(Array.from(e.target.files));
    }
  };

  const handleFiles = async (files) => {
    const validFiles = [];
    const errors = [];

    // Validate files
    files.forEach(file => {
      if (!allowedFileTypes.includes(file.type)) {
        errors.push(`${file.name}: File type not allowed. Please use PDF, images, or common document formats.`);
        return;
      }
      
      if (file.size > maxFileSize) {
        errors.push(`${file.name}: File too large. Maximum size is 10MB.`);
        return;
      }
      
      validFiles.push(file);
    });

    if (errors.length > 0) {
      setError(errors.join('\n'));
      return;
    }

    if (validFiles.length === 0) return;

    setUploading(true);
    setError(null);

    try {
      const uploadPromises = validFiles.map(file => 
        warehouseService.uploadFile(receiptId, file, userId)
      );
      
      await Promise.all(uploadPromises);
      await loadAttachments();
      
      // Clear file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (err) {
      console.error('Upload error:', err);
      setError('Failed to upload files. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const handleDownload = async (attachment) => {
    try {
      const url = await warehouseService.getFileUrl(attachment.file_path);
      if (url) {
        const link = document.createElement('a');
        link.href = url;
        link.download = attachment.file_name;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    } catch (err) {
      console.error('Download error:', err);
      setError('Failed to download file');
    }
  };

  const handleDelete = async (attachmentId) => {
    if (window.confirm('Are you sure you want to delete this file?')) {
      try {
        // Note: This would need a delete attachment function in warehouseService
        // For now, we'll reload attachments
        await loadAttachments();
      } catch (err) {
        console.error('Delete error:', err);
        setError('Failed to delete file');
      }
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (fileType) => {
    if (fileType.startsWith('image/')) return 'üñºÔ∏è';
    if (fileType === 'application/pdf') return 'üìÑ';
    if (fileType.includes('word')) return 'üìù';
    if (fileType.includes('excel') || fileType.includes('spreadsheet')) return 'üìä';
    if (fileType.includes('text')) return 'üìÉ';
    return 'üìé';
  };

  const getFileTypeLabel = (fileType) => {
    const typeMap = {
      'application/pdf': 'PDF',
      'image/jpeg': 'JPEG',
      'image/jpg': 'JPG',
      'image/png': 'PNG',
      'image/gif': 'GIF',
      'application/msword': 'DOC',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'DOCX',
      'application/vnd.ms-excel': 'XLS',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'XLSX',
      'text/plain': 'TXT',
      'text/csv': 'CSV'
    };
    return typeMap[fileType] || 'FILE';
  };

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <div
        className={`relative border-2 border-dashed rounded-lg p-6 transition-colors ${
          dragActive 
            ? 'border-blue-400 bg-blue-50' 
            : 'border-gray-300 hover:border-gray-400'
        } ${uploading ? 'opacity-50 pointer-events-none' : ''}`}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <div className="text-center">
          <div className="text-4xl mb-4">üìé</div>
          <div className="text-lg font-medium text-gray-900 mb-2">
            Drop files here or click to upload
          </div>
          <div className="text-sm text-gray-600 mb-4">
            Support for PDF, images, and common document formats (max 10MB)
          </div>
          <button
            type="button"
            onClick={() => fileInputRef.current?.click()}
            disabled={uploading}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 font-medium"
          >
            {uploading ? 'Uploading...' : 'Choose Files'}
          </button>
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept=".pdf,.jpg,.jpeg,.png,.gif,.doc,.docx,.xls,.xlsx,.txt,.csv"
            onChange={handleFileInput}
            className="hidden"
          />
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <div className="text-red-400">‚ö†Ô∏è</div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Upload Error</h3>
              <div className="mt-2 text-sm text-red-700 whitespace-pre-line">{error}</div>
              <button
                onClick={() => setError(null)}
                className="mt-2 text-sm text-red-600 hover:text-red-500"
              >
                Dismiss
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Upload Progress */}
      {uploading && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-3"></div>
            <div className="text-sm text-blue-800">Uploading files...</div>
          </div>
        </div>
      )}

      {/* Attachments List */}
      {attachments.length > 0 && (
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-gray-700 flex items-center">
            üìé Attachments ({attachments.length})
          </h4>
          
          <div className="space-y-2">
            {attachments.map((attachment, index) => (
              <div 
                key={attachment.id || index} 
                className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
              >
                <div className="flex items-center space-x-3 flex-1 min-w-0">
                  <div className="text-2xl">
                    {getFileIcon(attachment.file_type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium text-gray-900 truncate">
                      {attachment.file_name}
                    </div>
                    <div className="flex items-center space-x-4 text-xs text-gray-500">
                      <span className="bg-gray-200 px-2 py-1 rounded">
                        {getFileTypeLabel(attachment.file_type)}
                      </span>
                      <span>{formatFileSize(attachment.file_size)}</span>
                      <span>
                        {new Date(attachment.created_at).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 ml-4">
                  <button
                    onClick={() => handleDownload(attachment)}
                    className="p-2 text-gray-400 hover:text-blue-600 rounded-lg hover:bg-white transition-colors"
                    title="Download"
                  >
                    üì•
                  </button>
                  <button
                    onClick={() => handleDelete(attachment.id)}
                    className="p-2 text-gray-400 hover:text-red-600 rounded-lg hover:bg-white transition-colors"
                    title="Delete"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* File Type Info */}
      <div className="text-xs text-gray-500 space-y-1">
        <div><strong>Supported formats:</strong></div>
        <div>‚Ä¢ <strong>Documents:</strong> PDF, DOC, DOCX, XLS, XLSX, TXT, CSV</div>
        <div>‚Ä¢ <strong>Images:</strong> JPG, JPEG, PNG, GIF</div>
        <div>‚Ä¢ <strong>Maximum file size:</strong> 10MB per file</div>
      </div>
    </div>
  );
};

// Advanced File Preview Component
export const FilePreviewModal = ({ attachment, isOpen, onClose }) => {
  const [previewUrl, setPreviewUrl] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isOpen && attachment) {
      loadPreview();
    }
  }, [isOpen, attachment]);

  const loadPreview = async () => {
    try {
      setLoading(true);
      const url = await warehouseService.getFileUrl(attachment.file_path);
      setPreviewUrl(url);
    } catch (err) {
      console.error('Error loading preview:', err);
    } finally {
      setLoading(false);
    }
  };

  const canPreview = (fileType) => {
    return fileType.startsWith('image/') || fileType === 'application/pdf';
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl max-h-full w-full overflow-hidden">
        <div className="flex justify-between items-center p-4 border-b border-gray-200">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              {attachment.file_name}
            </h3>
            <div className="text-sm text-gray-600">
              {getFileTypeLabel(attachment.file_type)} ‚Ä¢ {formatFileSize(attachment.file_size)}
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 text-xl"
          >
            ‚úï
          </button>
        </div>
        
        <div className="p-4 max-h-96 overflow-auto">
          {loading ? (
            <div className="flex items-center justify-center h-32">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : canPreview(attachment.file_type) && previewUrl ? (
            <div className="text-center">
              {attachment.file_type.startsWith('image/') ? (
                <img 
                  src={previewUrl} 
                  alt={attachment.file_name}
                  className="max-w-full max-h-80 mx-auto rounded"
                />
              ) : (
                <iframe
                  src={previewUrl}
                  className="w-full h-80 border border-gray-300 rounded"
                  title={attachment.file_name}
                />
              )}
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üìÑ</div>
              <div className="text-gray-600 mb-4">
                Preview not available for this file type
              </div>
              <a
                href={previewUrl}
                download={attachment.file_name}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 inline-block"
              >
                Download File
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FileUploadManager;
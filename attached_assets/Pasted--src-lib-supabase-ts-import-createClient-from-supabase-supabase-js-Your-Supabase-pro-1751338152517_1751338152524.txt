// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

// Your Supabase project configuration
const supabaseUrl = 'https://bqmpupymchanohpfzglw.supabase.co'
const supabaseAnonKey = 'your_anon_key_here' // Replace with your actual anon key

// Create Supabase client with additional options
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
})

// Database types (based on your schema from the document)
export interface Profile {
  id: string
  email: string | null
  name: string | null
  company: string | null
  phone: string | null
  language: string
  llm_api_key: string | null
  created_at: string
  updated_at: string
  avatar_url: string | null
  bio: string | null
  location: string | null
  website: string | null
  job_title: string | null
  organization_id: number | null
}

export interface Organization {
  id: number
  name: string
  domain: string | null
  subscription_plan: string
  settings: Record<string, any>
  created_at: string
  updated_at: string
}

// Auth types
export interface AuthUser {
  id: string
  email?: string
  user_metadata?: {
    name?: string
    avatar_url?: string
  }
}

// Helper function to get user profile
export const getUserProfile = async (userId: string): Promise<Profile | null> => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single()

    if (error) {
      console.error('Error fetching user profile:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in getUserProfile:', error)
    return null
  }
}

// Helper function to update user profile
export const updateUserProfile = async (userId: string, updates: Partial<Profile>): Promise<boolean> => {
  try {
    const { error } = await supabase
      .from('profiles')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', userId)

    if (error) {
      console.error('Error updating user profile:', error)
      return false
    }

    return true
  } catch (error) {
    console.error('Error in updateUserProfile:', error)
    return false
  }
}
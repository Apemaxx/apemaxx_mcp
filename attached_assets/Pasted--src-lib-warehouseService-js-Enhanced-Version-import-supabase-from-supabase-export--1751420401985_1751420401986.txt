// src/lib/warehouseService.js - Enhanced Version
import { supabase } from './supabase';

export const warehouseService = {
  // Warehouse receipt statuses
  STATUSES: {
    RECEIVED_ON_HAND: 'received_on_hand',
    RELEASED_BY_AIR: 'released_by_air', 
    RELEASED_BY_OCEAN: 'released_by_ocean',
    SHIPPED: 'shipped'
  },

  // Get warehouse receipts with enhanced data
  async getReceipts(userId, limit = 20, locationId = null, status = null) {
    let query = supabase
      .from('warehouse_receipt_summary_enhanced')
      .select('*')
      .eq('user_id', userId)
      .order('received_date', { ascending: false });
    
    if (limit) query = query.limit(limit);
    if (locationId) query = query.eq('warehouse_location_id', locationId);
    if (status) query = query.eq('status', status);
    
    const { data, error } = await query;
    if (error) throw error;
    return data;
  },

  // Get receipts by location
  async getReceiptsByLocation(userId) {
    const { data, error } = await supabase
      .from('warehouse_receipt_summary_enhanced')
      .select('*')
      .eq('user_id', userId)
      .order('warehouse_location_name', { ascending: true })
      .order('received_date', { ascending: false });
    
    if (error) throw error;

    // Group by location
    const groupedByLocation = {};
    data.forEach(receipt => {
      const location = receipt.warehouse_location_name || 'Unknown Location';
      if (!groupedByLocation[location]) {
        groupedByLocation[location] = [];
      }
      groupedByLocation[location].push(receipt);
    });

    return groupedByLocation;
  },

  // Get enhanced analytics
  async getDashboardStats(userId) {
    try {
      const { data, error } = await supabase
        .rpc('get_warehouse_analytics_enhanced', { user_uuid: userId });

      if (error) {
        console.warn('Analytics function not available, using fallback');
        return await this.getFallbackStats(userId);
      }
      return data;
    } catch (error) {
      console.warn('Analytics function failed, using fallback');
      return await this.getFallbackStats(userId);
    }
  },

  // Fallback stats calculation
  async getFallbackStats(userId) {
    const { data: receipts, error } = await supabase
      .from('warehouse_receipt_summary_enhanced')
      .select('*')
      .eq('user_id', userId);

    if (error) throw error;

    const stats = {
      total_receipts: receipts.length,
      by_status: {},
      by_location: {},
      total_pieces: 0,
      total_weight: 0,
      total_volume: 0,
      recent_activity: receipts.slice(0, 10)
    };

    receipts.forEach(receipt => {
      // Status counts
      const status = receipt.status || 'received_on_hand';
      stats.by_status[status] = (stats.by_status[status] || 0) + 1;

      // Location counts
      const location = receipt.warehouse_location_name || 'Unknown Location';
      stats.by_location[location] = (stats.by_location[location] || 0) + 1;

      // Totals
      stats.total_pieces += receipt.total_pieces || 0;
      stats.total_weight += parseFloat(receipt.total_weight_lb || 0);
      stats.total_volume += parseFloat(receipt.total_volume_ft3 || 0);
    });

    return stats;
  },

  // Create enhanced warehouse receipt
  async createReceipt(receiptData, files = []) {
    try {
      // Calculate volume if dimensions provided
      let volumeFt3 = receiptData.total_volume_ft3;
      if (!volumeFt3 && receiptData.dimensions_length && receiptData.dimensions_width && receiptData.dimensions_height) {
        volumeFt3 = (receiptData.dimensions_length * receiptData.dimensions_width * receiptData.dimensions_height) / 1728; // Convert cubic inches to cubic feet
      }

      // Calculate volumetric weight (VLB)
      let volumeVlb = receiptData.total_volume_vlb;
      if (!volumeVlb && volumeFt3) {
        volumeVlb = volumeFt3 * 10.4; // Standard VLB calculation
      }

      // Generate unique receipt number
      const receiptNumber = `WR${Date.now().toString().slice(-8)}`;
      
      // Prepare data for insertion
      const insertData = {
        wr_number: receiptNumber,
        received_date: new Date().toISOString(),
        received_by: receiptData.received_by,
        tracking_number: receiptData.tracking_number,
        pro_number: receiptData.pro_number,
        booking_reference: receiptData.booking_reference,
        shipment_id: receiptData.shipment_id,
        carrier_name: receiptData.carrier_name,
        driver_name: receiptData.driver_name,
        total_pieces: receiptData.total_pieces,
        total_weight_lb: receiptData.total_weight_lb,
        total_volume_ft3: volumeFt3,
        total_volume_vlb: volumeVlb,
        dimensions_length: receiptData.dimensions_length,
        dimensions_width: receiptData.dimensions_width,
        dimensions_height: receiptData.dimensions_height,
        package_type: receiptData.package_type,
        cargo_description: receiptData.cargo_description || 'GENERAL CARGO',
        shipper_id: receiptData.shipper_id,
        consignee_id: receiptData.consignee_id,
        warehouse_location_id: receiptData.warehouse_location_id,
        status: receiptData.status || this.STATUSES.RECEIVED_ON_HAND,
        notes: receiptData.notes,
        user_id: receiptData.user_id
      };

      // Create receipt record
      const { data: receipt, error } = await supabase
        .from('warehouse_receipts')
        .insert([insertData])
        .select()
        .single();

      if (error) throw error;

      // Upload files if provided
      if (files.length > 0) {
        await this.uploadFiles(files, receipt.id);
      }

      return receipt;
    } catch (error) {
      console.error('Error creating receipt:', error);
      throw error;
    }
  },

  // Update receipt status
  async updateStatus(receiptId, status, notes = '') {
    const { data, error } = await supabase
      .from('warehouse_receipts')
      .update({ 
        status,
        notes: notes || undefined,
        updated_at: new Date().toISOString()
      })
      .eq('id', receiptId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  // Address book integration
  async getAddressBook(userId, type = 'all') {
    let query = supabase
      .from('address_book')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true)
      .order('company_name');

    if (type !== 'all') {
      query = query.eq('business_type', type);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data;
  },

  // Create address book entry
  async createAddressBookEntry(addressData) {
    const { data, error } = await supabase
      .from('address_book')
      .insert([addressData])
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  // Warehouse locations
  async getWarehouseLocations() {
    const { data, error } = await supabase
      .from('warehouse_locations')
      .select('*')
      .eq('is_active', true)
      .order('location_name');

    if (error) throw error;
    return data;
  },

  // Consol week plans
  async getConsolWeekPlans(userId) {
    const { data, error } = await supabase
      .from('consol_week_plans')
      .select('*')
      .eq('created_by', userId)
      .order('year', { ascending: false })
      .order('week_number', { ascending: false });

    if (error) throw error;
    return data;
  },

  async createConsolWeekPlan(planData) {
    const { data, error } = await supabase
      .from('consol_week_plans')
      .insert([planData])
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async addToConsolPlan(receiptId, consolPlanId) {
    const { data, error } = await supabase
      .from('warehouse_receipts')
      .update({ consol_week_plan_id: consolPlanId })
      .eq('id', receiptId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  // File upload functionality
  async uploadFiles(files, receiptId) {
    const uploadPromises = Array.from(files).map(async (file) => {
      const fileExt = file.name.split('.').pop();
      const fileName = `${receiptId}/${Date.now()}.${fileExt}`;
      
      // Upload to storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('warehouse-receipts')
        .upload(fileName, file);

      if (uploadError) throw uploadError;

      // Get public URL
      const { data: { publicUrl } } = supabase.storage
        .from('warehouse-receipts')
        .getPublicUrl(fileName);

      // Save attachment record
      const { data: attachment, error: attachError } = await supabase
        .from('warehouse_receipt_attachments')
        .insert([{
          warehouse_receipt_id: receiptId,
          file_name: file.name,
          file_path: uploadData.path,
          file_type: fileExt,
          file_size: file.size,
          mime_type: file.type,
          uploaded_by: (await supabase.auth.getUser()).data.user?.id
        }])
        .select()
        .single();

      if (attachError) throw attachError;

      return {
        ...attachment,
        url: publicUrl
      };
    });

    return Promise.all(uploadPromises);
  },

  // Search functionality
  async searchReceipts(userId, searchTerm) {
    const { data, error } = await supabase
      .from('warehouse_receipt_summary_enhanced')
      .select('*')
      .eq('user_id', userId)
      .or(`receipt_number.ilike.%${searchTerm}%,tracking_number.ilike.%${searchTerm}%,shipper_name.ilike.%${searchTerm}%,consignee_name.ilike.%${searchTerm}%,carrier_name.ilike.%${searchTerm}%,pro_number.ilike.%${searchTerm}%`)
      .order('received_date', { ascending: false });
    
    if (error) throw error;
    return data;
  },

  // Utility functions
  formatStatus(status) {
    const statusMap = {
      'received_on_hand': 'Received On Hand',
      'released_by_air': 'Released by Air',
      'released_by_ocean': 'Released by Ocean',
      'shipped': 'Shipped'
    };
    return statusMap[status] || status;
  },

  getStatusColor(status) {
    const colorMap = {
      'received_on_hand': 'bg-blue-100 text-blue-800',
      'released_by_air': 'bg-yellow-100 text-yellow-800',
      'released_by_ocean': 'bg-purple-100 text-purple-800',
      'shipped': 'bg-green-100 text-green-800'
    };
    return colorMap[status] || 'bg-gray-100 text-gray-800';
  }
};